@page "/new-order"
@using fl_front.Dtos.Planification
@using fl_front.Interfaces
@using fl_front.Dtos.OrdersF
@inject IOrderServiceF OrderService

<h1>Nueva Orden de Compra</h1>

<div class="mb-3">
    <label class="form-label">Proveedor</label>
    <input class="form-control" @bind="proveedor" />
</div>
<div class="mb-3">
    <label class="form-label">Notas</label>
    <textarea class="form-control" @bind="notas"></textarea>
</div>

<h5>Ítems de la Orden</h5>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Insumo</th>
            <th>Cantidad</th>
            <th>Precio Unitario</th>
            <th>Fecha de Entrega</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td><input class="form-control" @bind="item.Insumo" /></td>
                <td><input type="number" class="form-control" @bind="item.Cantidad" /></td>
                <td><input type="number" step="0.01" class="form-control" @bind="item.PrecioUnitario" /></td>
                <td><input type="date" class="form-control" @bind="item.FechaEntregaDeseada" /></td>
                <td>
                    <button class="btn btn-danger" @onclick="() => EliminarItem(item)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-secondary mb-3" @onclick="AgregarItem">+ Agregar Ítem</button>
<br />
<button class="btn btn-primary" @onclick="CrearOrden">Crear Orden</button>

@if (!string.IsNullOrWhiteSpace(mensaje))
{
    <div class="alert alert-info mt-3">@mensaje</div>
}

@code {
    private string proveedor = string.Empty;
    private string notas = string.Empty;
    private List<PurchaseOrderItemDtoF> items = new();
    private string mensaje = string.Empty;

    private void AgregarItem()
    {
        items.Add(new PurchaseOrderItemDtoF());
    }

    private void EliminarItem(PurchaseOrderItemDtoF item)
    {
        items.Remove(item);
    }

    private async Task CrearOrden()
    {
        if (string.IsNullOrWhiteSpace(proveedor) || items.Count == 0)
        {
            mensaje = "Debe ingresar proveedor y al menos un ítem.";
            return;
        }

        var dto = new CreateOrderDtoF
            {
                Proveedor = proveedor,
                Notas = notas,
                Items = items.Select(i => new PurchaseOrderItemDtoF
                {
                    Insumo = i.Insumo,
                    Cantidad = i.Cantidad,
                    PrecioUnitario = i.PrecioUnitario,
                    FechaEntregaDeseada = i.FechaEntregaDeseada
                }).ToList()
            };


        var success = await OrderService.CreateAsync(dto);
        if (success)
        {
            mensaje = "Orden creada exitosamente.";
            proveedor = string.Empty;
            notas = string.Empty;
            items.Clear();
        }
        else
        {
            mensaje = "Error al crear la orden.";
        }
    }
}
