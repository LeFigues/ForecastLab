@page "/new-order"
@using fl_front.Dtos.Planification
@using fl_front.Interfaces
@using fl_front.Dtos.OrdersF
@inject IOrderServiceF OrderService

<!-- Animate.css & Bootstrap Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

<h3 class="text-center text-primary fw-bold mb-4 animate__animated animate__fadeInDown">
    <i class="bi bi-cart-plus-fill me-2 fs-3"></i> Nueva Orden de Compra
</h3>

<div class="card shadow border-0 animate__animated animate__fadeIn">
    <div class="card-body">
        <div class="mb-3">
            <label class="form-label fw-semibold">Proveedor</label>
            <input class="form-control" placeholder="Nombre del proveedor" @bind="proveedor" />
        </div>
        <div class="mb-3">
            <label class="form-label fw-semibold">Notas</label>
            <textarea class="form-control" rows="3" placeholder="Notas adicionales..." @bind="notas"></textarea>
        </div>
    </div>
</div>

<div class="mt-4 animate__animated animate__fadeInUp">
    <h5 class="text-secondary fw-bold mb-3">
        <i class="bi bi-list-check me-2"></i> Ítems de la Orden
    </h5>

    <table class="table table-hover table-bordered shadow-sm">
        <thead class="table-dark text-center">
            <tr>
                <th>Insumo</th>
                <th>Cantidad</th>
                <th>Precio Unitario (Bs.)</th>
                <th>Fecha de Entrega</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td><input class="form-control" placeholder="Nombre del insumo" @bind="item.Insumo" /></td>
                    <td><input type="number" min="1" class="form-control" @bind="item.Cantidad" /></td>
                    <td><input type="number" step="0.01" min="0" class="form-control" @bind="item.PrecioUnitario" /></td>
                    <td><input type="date" class="form-control" @bind="item.FechaEntregaDeseada" /></td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarItem(item)">
                            <i class="bi bi-trash3-fill"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="text-start mb-4">
        <button class="btn btn-outline-secondary" @onclick="AgregarItem">
            <i class="bi bi-plus-circle me-1"></i> Agregar Ítem
        </button>
    </div>

    <div class="text-end">
        <button class="btn btn-primary px-4 fw-semibold" @onclick="CrearOrden">
            <i class="bi bi-send-check-fill me-2"></i> Crear Orden
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(mensaje))
    {
        <div class="alert alert-info mt-4 animate__animated animate__fadeIn">@mensaje</div>
    }
</div>

@code {
    private string proveedor = string.Empty;
    private string notas = string.Empty;
    private List<PurchaseOrderItemDtoF> items = new();
    private string mensaje = string.Empty;

    private void AgregarItem()
    {
        items.Add(new PurchaseOrderItemDtoF());
    }

    private void EliminarItem(PurchaseOrderItemDtoF item)
    {
        items.Remove(item);
    }

    private async Task CrearOrden()
    {
        if (string.IsNullOrWhiteSpace(proveedor) || items.Count == 0)
        {
            mensaje = "Debe ingresar proveedor y al menos un ítem.";
            return;
        }

        var dto = new CreateOrderDtoF
            {
                Proveedor = proveedor,
                Notas = notas,
                Items = items.Select(i => new PurchaseOrderItemDtoF
                {
                    Insumo = i.Insumo,
                    Cantidad = i.Cantidad,
                    PrecioUnitario = i.PrecioUnitario,
                    FechaEntregaDeseada = i.FechaEntregaDeseada
                }).ToList()
            };

        var success = await OrderService.CreateAsync(dto);
        if (success)
        {
            mensaje = "Orden creada exitosamente.";
            proveedor = string.Empty;
            notas = string.Empty;
            items.Clear();
        }
        else
        {
            mensaje = "Error al crear la orden.";
        }
    }
}
