@page "/orders"
@using fl_front.Dtos.OrdersF
@using fl_front.Interfaces
@inject IOrderServiceF OrderService

<h1 class="mb-4">Órdenes de Compra</h1>

@if (orders == null)
{
    <p>Cargando...</p>
}
else
{
    <div class="mb-3">
        <a class="btn btn-primary" href="/new-order">Nueva Orden</a>
    </div>
    <table class="table table-bordered table-striped">
        <thead class="table-dark">
            <tr>
                <th>Número</th>
                <th>Proveedor</th>
                <th>Fecha</th>
                <th>Estado</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var o in orders)
            {
                <tr>
                    <td>@o.NumeroOrden</td>
                    <td>@o.Proveedor</td>
                    <td>@o.FechaEmision.ToString("yyyy-MM-dd")</td>
                    <td>@o.Estado</td>
                    <td>@o.TotalMonto.ToString("C")</td>
                    <td>
                        <a class="btn btn-sm btn-info me-1" href="/order-detail/@o.Id">Ver</a>
                        <button class="btn btn-sm btn-warning me-1" @onclick='() => CambiarEstado(o.Id, "enviar")'>Enviar</button>
                        <button class="btn btn-sm btn-success" @onclick='() => CambiarEstado(o.Id, "recibir")'>Recibir</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PurchaseOrderDtoF>? orders;

    protected override async Task OnInitializedAsync()
    {
        orders = await OrderService.GetAllAsync();
    }

    private async Task CambiarEstado(string id, string accion)
    {
        var ok = await OrderService.CambiarEstadoAsync(id, accion);
        if (ok)
            orders = await OrderService.GetAllAsync();
    }

}
