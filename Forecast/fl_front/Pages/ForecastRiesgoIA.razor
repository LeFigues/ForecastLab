@page "/insumos-riesgo-ai"
@using System.Net.Http.Json
@inject HttpClient Http

<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    .ia-card {
        background: #042b3d;
        border: 1px solid #0c4e6e;
        border-radius: 10px;
        padding: 1.5rem;
        color: #d1ecf1;
        box-shadow: 0 0 10px rgba(0,0,0,0.3);
    }

    .ia-title {
        color: #00cfff;
        font-weight: bold;
    }

    .spinner-text {
        font-size: 1.2rem;
        color: #007bff;
        margin-top: 1rem;
    }
</style>

<!-- ENCABEZADO -->
<div class="text-center my-4 animate__animated animate__fadeInDown">
    <div class="d-flex justify-content-center align-items-center gap-3">
        <div class="bg-gradient bg-primary rounded-circle d-flex justify-content-center align-items-center" style="width: 55px; height: 55px; box-shadow: 0 4px 10px rgba(0,0,0,0.3);">
            <i class="bi bi-cpu text-white fs-4"></i>
        </div>
        <h2 class="text-primary fw-bold m-0">Análisis de Riesgo con Inteligencia Artificial</h2>
    </div>
</div>

<!-- RESPUESTA IA -->
@if (respuestaIA is not null)
{
    <div class="container mb-4 animate__animated animate__fadeInUp">
        <div class="ia-card">
            <h5 class="ia-title mb-3"><i class="bi bi-file-earmark-text-fill me-2"></i>Resumen de Inteligencia Artificial:</h5>

            @if (string.IsNullOrWhiteSpace(respuestaIA))
            {
                <div class="text-warning">⚠️ La IA no devolvió información útil.</div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-bordered table-hover text-light">
                        <thead class="table-dark text-center">
                            <tr>
                                <th style="width: 20%">Tipo</th>
                                <th style="width: 40%">Insumo</th>
                                <th style="width: 40%">Detalle</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                var lineas = respuestaIA.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                                foreach (var linea in lineas)
                                {
                                    var texto = linea.Trim();

                                    // Encabezados o comentarios generales
                                    if (texto.StartsWith("Para predecir", StringComparison.OrdinalIgnoreCase) ||
                                    texto.StartsWith("Basándonos", StringComparison.OrdinalIgnoreCase) ||
                                    texto.StartsWith("En resumen", StringComparison.OrdinalIgnoreCase))
                                    {
                                        <tr>
                                            <td class="text-center fw-semibold">Comentario</td>
                                            <td></td>
                                            <td>@texto</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        var partes = texto.Split(':', 2);
                                        if (partes.Length == 2)
                                        {
                                            <tr>
                                                <td class="text-center">Diagnóstico</td>
                                                <td class="fw-bold">@partes[0].Trim()</td>
                                                <td>@partes[1].Trim()</td>
                                            </tr>
                                        }
                                        else
                                        {
                                            <tr>
                                                <td class="text-center">Comentario</td>
                                                <td></td>
                                                <td>@texto</td>
                                            </tr>
                                        }
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

<!-- BOTONES -->
<div class="mb-4 d-flex justify-content-center gap-3 animate__animated animate__fadeIn">
    <button class="btn btn-outline-primary px-4 py-2 fw-semibold shadow-sm" @onclick="CargarDatos" disabled="@loading">
        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true" hidden="@(loading == false)"></span>
        Obtener Forecast
    </button>

    <button class="btn btn-outline-success px-4 py-2 fw-semibold shadow-sm" @onclick="EnviarAI" disabled="@(!datos.Any() || loading)">
        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true" hidden="@(loading == false)"></span>
        Analizar con IA
    </button>
</div>

<!-- SPINNER CON TEXTO -->
@if (loading)
{
    <div class="d-flex flex-column align-items-center mt-5 animate__animated animate__fadeIn">
        <div class="spinner-border text-info" role="status" style="width: 3rem; height: 3rem;"></div>
        <div class="spinner-text mt-3">Analizando con inteligencia artificial . . .</div>
    </div>
}
else if (datos.Any())
{
    <div class="table-responsive animate__animated animate__fadeInUp">
        <table class="table table-hover table-bordered shadow-sm">
            <thead class="table-primary text-center">
                <tr>
                    <th>Insumo</th>
                    <th>Stock Actual</th>
                    <th>Stock Mínimo</th>
                    <th>Uso Promedio</th>
                    <th>Meses Restantes</th>
                    <th>Riesgo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in datos)
                {
                    <tr class="text-center">
                        <td>@item.InsumoNombre</td>
                        <td>@item.StockActual</td>
                        <td>@item.StockMinimo</td>
                        <td>@item.UsoMensualPromedio</td>
                        <td>@item.MesesSobrantes</td>
                        <td><strong>@item.Riesgo</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ForecastRiesgoDto> datos = new();
    private string? respuestaIA = null;
    private bool loading = false;

    private async Task CargarDatos()
    {
        loading = true;
        respuestaIA = null;
        try
        {
            datos = await Http.GetFromJsonAsync<List<ForecastRiesgoDto>>("https://forecast.labs.underflabs.com/api/forecast/insumos-riesgo") ?? new();
        }
        catch
        {
            respuestaIA = "⚠️ Error al obtener los datos.";
        }
        loading = false;
    }

    private async Task EnviarAI()
    {
        if (!datos.Any()) return;

        loading = true;
        respuestaIA = null;

        var body = new { datos };

        try
        {
            var response = await Http.PostAsJsonAsync("https://forecast.labs.underflabs.com/api/forecast/insumos-riesgo/ai", body);
            if (response.IsSuccessStatusCode)
            {
                respuestaIA = await response.Content.ReadAsStringAsync();
            }
            else
            {
                respuestaIA = "⚠️ Error al comunicarse con la inteligencia artificial.";
            }
        }
        catch
        {
            respuestaIA = "⚠️ Error de red al enviar a IA.";
        }

        loading = false;
    }

    private class ForecastRiesgoDto
    {
        public string InsumoNombre { get; set; } = "";
        public int StockActual { get; set; }
        public int StockMinimo { get; set; }
        public double UsoMensualPromedio { get; set; }
        public double MesesSobrantes { get; set; }
        public string Riesgo { get; set; } = "";
    }
}

