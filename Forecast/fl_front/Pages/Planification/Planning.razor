@page "/planning"
@using fl_front.Dtos.Planification
@using fl_front.Interfaces
@inject IPlanningServiceF PlanningService
@inject IJSRuntime JS

<!-- Animate.css & Bootstrap Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<h3 class="text-center text-primary fw-bold mb-4 animate__animated animate__fadeInDown">
    <i class="bi bi-journal-check me-2 fs-3"></i> Planes de Compra
</h3>

<div class="text-center mb-4 animate__animated animate__fadeIn">
    <button class="btn btn-outline-primary px-4 shadow-sm fw-semibold" @onclick="GenerarPlanes">
        <i class="bi bi-lightbulb me-2"></i> Generar Nuevos Planes
    </button>
</div>

@if (planes == null)
{
    <div class="text-center text-muted animate__animated animate__fadeIn">
        <div class="spinner-border text-primary" role="status"></div>
        <p class="mt-2">Cargando planes...</p>
    </div>
}
else if (planes.Count == 0)
{
    <div class="alert alert-warning text-center animate__animated animate__fadeIn">
        No hay planes de compra registrados.
    </div>
}
else
{
    <div class="table-responsive animate__animated animate__fadeInUp">
        <table class="table table-hover table-bordered shadow-sm text-center">
            <thead class="table-dark">
                <tr>
                    <th>Insumo</th>
                    <th>Unidades a Comprar</th>
                    <th>Fecha Sugerida</th>
                    <th>Proveedor Sugerido</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var p in planes)
                {
                    <tr>
                        <td>@p.Insumo</td>
                        <td>@p.UnidadesAComprar</td>
                        <td>@p.FechaSugeridaCompra.ToString("yyyy-MM-dd")</td>
                        <td>@p.ProveedorSugerido</td>
                        <td>
                            <span class="badge
                                @(p.Estado == "Pendiente" ? "bg-warning text-dark" :
                                  p.Estado == "Aprobado" ? "bg-success" :
                                  p.Estado == "Rechazado" ? "bg-danger" : "bg-secondary")">
                                @p.Estado
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="text-center mt-4 animate__animated animate__fadeIn">
        <button class="btn btn-outline-info fw-bold" @onclick="MostrarGrafica">
            <i class="bi bi-bar-chart"></i> Ver Gráfica de Unidades a Comprar
        </button>
    </div>

    @if (mostrarGrafica)
    {
        <div class="mt-3 mb-5 animate__animated animate__fadeInUp">
            <canvas id="graficaUnidades" height="300"></canvas>
        </div>
    }
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info mt-3 animate__animated animate__fadeIn">@mensaje</div>
}

@code {
    private List<PlanCompraDtoF>? planes;
    private string mensaje = string.Empty;
    private bool mostrarGrafica = false;

    protected override async Task OnInitializedAsync()
    {
        planes = await PlanningService.GetPlanesAsync();
    }

    private async Task GenerarPlanes()
    {
        var success = await PlanningService.GenerarPlanesAsync();
        if (success)
        {
            planes = await PlanningService.GetPlanesAsync();
            mensaje = "Planes generados correctamente.";
        }
        else
        {
            mensaje = "Error al generar los planes.";
        }
    }

    private async Task MostrarGrafica()
    {
        mostrarGrafica = true;
        var labels = planes.Select(p => p.Insumo).ToArray();
        var data = planes.Select(p => p.UnidadesAComprar).ToArray();
        await JS.InvokeVoidAsync("renderGraficaUnidades", labels, data);
    }
}

<!-- Script Chart.js personalizado -->
<script>
    window.renderGraficaUnidades = (labels, data) => {
        const ctx = document.getElementById('graficaUnidades');
        if (!ctx) return;

        const graficaExistente = Chart.getChart("graficaUnidades");
        if (graficaExistente) graficaExistente.destroy();

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Unidades a Comprar',
                    data: data,
                    backgroundColor: 'rgba(0, 123, 255, 0.6)',
                    borderColor: 'rgba(0, 123, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
    };
</script>
