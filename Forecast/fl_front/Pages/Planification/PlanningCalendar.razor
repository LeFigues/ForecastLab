@page "/planning-calendar"
@using fl_front.Dtos.Planification
@using fl_front.Interfaces
@inject IPlanningServiceF PlanningService

<!-- Animate.css & Bootstrap Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

<h3 class="text-center text-info fw-bold mb-4 animate__animated animate__fadeInDown">
    <i class="bi bi-calendar-event-fill me-2 fs-3"></i> Calendario de Compras
</h3>

@if (eventos == null)
{
    <div class="text-center text-muted animate__animated animate__fadeIn">
        <div class="spinner-border text-info" role="status"></div>
        <p class="mt-2">Cargando eventos...</p>
    </div>
}
else if (eventos.Count == 0)
{
    <div class="alert alert-warning text-center animate__animated animate__fadeIn">
        No hay eventos programados.
    </div>
}
else
{
    <div class="table-responsive animate__animated animate__fadeInUp">
        <table class="table table-hover table-bordered shadow-sm text-center">
            <thead class="table-dark">
                <tr>
                    <th><i class="bi bi-card-text me-1"></i> Evento</th>
                    <th><i class="bi bi-calendar3 me-1"></i> Fecha</th>
                    <th><i class="bi bi-patch-check-fill me-1"></i> Estado</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ev in eventos)
                {
                    <tr>
                        <td>@ev.Titulo</td>
                        <td>@ev.Fecha.ToString("yyyy-MM-dd")</td>
                        <td>
                            <span class="badge @ObtenerClaseEstado(ev.Estado) px-3 py-2 rounded-pill">
                                @ev.Estado
                            </span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<EventoCompraDtoF>? eventos;

    protected override async Task OnInitializedAsync()
    {
        eventos = await PlanningService.GetCalendarioEventosAsync();
    }

    private string ObtenerClaseEstado(string estado) => estado switch
    {
        "Pendiente" => "bg-warning text-dark",
        "Ordenado" => "bg-success",
        "Cancelado" => "bg-danger",
        _ => "bg-secondary"
    };
}
