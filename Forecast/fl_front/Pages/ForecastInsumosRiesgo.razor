@page "/insumos-riesgo"
@using fl_front.Dtos
@using fl_front.Services
@inject IForecastService ForecastService
@inject IJSRuntime JS
@using System.Text.Json

<!-- Animate.css & Bootstrap Icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />

<style>
    .custom-title-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, #dc3545, #ff6b6b);
        box-shadow: 0 5px 10px rgba(0,0,0,0.2);
        border: 2px solid white;
    }

    .custom-table th {
        background-color: #212529;
        color: #fff;
        cursor: pointer;
        text-align: center;
    }

    .custom-table td {
        text-align: center;
        vertical-align: middle;
    }

    .custom-table tbody tr:hover {
        background-color: rgba(255, 0, 0, 0.03);
        transition: background-color 0.3s ease-in-out;
    }
</style>

<h3 class="text-center text-uppercase text-danger mb-4 fw-bold animate__animated animate__fadeInDown">
    <span class="d-inline-flex justify-content-center align-items-center me-2 custom-title-icon">
        <i class="bi bi-exclamation-triangle-fill text-white fs-5"></i>
    </span>
    FORECAST DE INSUMOS EN RIESGO
</h3>

@if (IsLoading)
{
    <div class="d-flex justify-content-center mt-5 animate__animated animate__fadeIn">
        <div class="spinner-border text-danger" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
}
else
{
    <!-- BUSCADOR Y EXPORTACIÓN -->
    <div class="row mb-3 justify-content-between px-3 animate__animated animate__fadeInUp">
        <div class="col-md-6 mb-2">
            <input type="text" class="form-control shadow-sm rounded-pill px-4"
                   placeholder="🔎 Buscar insumo"
                   @oninput="OnSearchInputChanged"
                   value="@SearchTerm" />
        </div>
        <div class="col-md-4 text-end mb-2">
            <button class="btn btn-success shadow-sm rounded-pill px-4 py-2" @onclick="ExportToExcelAsync">
                <i class="bi bi-file-earmark-excel me-2"></i> Exportar Excel
            </button>
        </div>
    </div>

    <!-- BOTONES DE FILTRO -->
    <div class="d-flex justify-content-center gap-3 mb-4 animate__animated animate__fadeInUp">
        <button class="btn btn-outline-danger fw-semibold"
                @onclick='() => FiltrarPorRiesgo("Alerta crítica")'>
            <i class="bi bi-exclamation-octagon me-1"></i>
            Alerta crítica (@ContarPorRiesgo("Alerta crítica"))
        </button>

        <button class="btn btn-outline-success fw-semibold"
                @onclick='() => FiltrarPorRiesgo("Sin riesgo")'>
            <i class="bi bi-shield-check me-1"></i>
            Sin riesgo (@ContarPorRiesgo("Sin riesgo"))
        </button>

        <button class="btn btn-outline-info fw-semibold"
                @onclick='() => FiltrarPorRiesgo("Sin uso")'>
            <i class="bi bi-slash-circle me-1"></i>
            Sin uso (@ContarPorRiesgo("Sin uso"))
        </button>
    </div>
    <!-- GRÁFICA -->
    <h4 class="mt-5 text-center text-secondary animate__animated animate__fadeInUp">
        <i class="bi bi-pie-chart-fill text-danger me-2"></i>
        Distribución de insumos por tipo de riesgo
    </h4>
    <canvas id="riskChart" class="d-block mx-auto mb-4" style="max-width: 300px;" height="180"></canvas>

    <!-- TABLA -->
    <div class="table-responsive animate__animated animate__fadeInUp">
        <table class="table table-bordered table-hover shadow-sm custom-table">
            <thead>
                <tr>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.InsumoNombre))">Insumo</th>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.StockActual))">Stock Actual</th>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.StockMinimo))">Stock Mínimo</th>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.UsoMensualPromedio))">Uso Promedio</th>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.MesesSobrantes))">Meses Restantes</th>
                    <th @onclick="() => SortBy(nameof(ForecastRiesgoDto.Riesgo))">Riesgo</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in data)
                {
                    <tr class="@GetRiesgoClass(item.Riesgo)">
                        <td>@item.InsumoNombre</td>
                        <td>@item.StockActual</td>
                        <td>@item.StockMinimo</td>
                        <td>@item.UsoMensualPromedio</td>
                        <td>@item.MesesSobrantes</td>
                        <td><strong>@item.Riesgo</strong></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

  

}

@code {
    private List<ForecastRiesgoDto> data = new();
    private List<ForecastRiesgoDto> dataOriginal = new();
    private bool IsLoading = true;
    private string SearchTerm = "";
    private string? CurrentSort;
    private Dictionary<string, int> RiesgoCounts = new();
    private bool _rendered = false;

    protected override async Task OnInitializedAsync()
    {
        var raw = await ForecastService.GetForecastRiesgoAsync();
        data = raw.ToList();
        dataOriginal = data.ToList();

        RiesgoCounts = dataOriginal
            .GroupBy(d => d.Riesgo)
            .ToDictionary(g => g.Key, g => g.Count());

        IsLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_rendered && !IsLoading)
        {
            _rendered = true;
            await JS.InvokeVoidAsync("renderRiesgoChart", RiesgoCounts);
        }
    }

    private void SortBy(string property)
    {
        if (CurrentSort == property)
        {
            data.Reverse();
            return;
        }

        CurrentSort = property;
        data = property switch
        {
            nameof(ForecastRiesgoDto.InsumoNombre) => data.OrderBy(x => x.InsumoNombre).ToList(),
            nameof(ForecastRiesgoDto.StockActual) => data.OrderBy(x => x.StockActual).ToList(),
            nameof(ForecastRiesgoDto.StockMinimo) => data.OrderBy(x => x.StockMinimo).ToList(),
            nameof(ForecastRiesgoDto.UsoMensualPromedio) => data.OrderBy(x => x.UsoMensualPromedio).ToList(),
            nameof(ForecastRiesgoDto.MesesSobrantes) => data.OrderBy(x => x.MesesSobrantes).ToList(),
            nameof(ForecastRiesgoDto.Riesgo) => data.OrderBy(x => x.Riesgo).ToList(),
            _ => data
        };
    }

    private void FiltrarPorRiesgo(string riesgo)
    {
        data = dataOriginal
            .Where(d => d.Riesgo == riesgo && (string.IsNullOrWhiteSpace(SearchTerm) || d.InsumoNombre.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        SearchTerm = e.Value?.ToString() ?? "";
        AplicarFiltroBusqueda();
    }

    private void AplicarFiltroBusqueda()
    {
        data = dataOriginal
            .Where(d => string.IsNullOrWhiteSpace(SearchTerm) || d.InsumoNombre.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task ExportToExcelAsync()
    {
        var exportData = data.Select(d => new Dictionary<string, object>
            {
                ["Insumo"] = d.InsumoNombre,
                ["Stock Actual"] = d.StockActual,
                ["Stock Mínimo"] = d.StockMinimo,
                ["Uso Promedio"] = d.UsoMensualPromedio,
                ["Meses Restantes"] = d.MesesSobrantes,
                ["Riesgo"] = d.Riesgo
            }).ToList();

        var json = JsonSerializer.Serialize(exportData);
        await JS.InvokeVoidAsync("exportToExcel", json);
    }

    private int ContarPorRiesgo(string riesgo)
    {
        return dataOriginal.Count(d => d.Riesgo == riesgo);
    }

    private string GetRiesgoClass(string riesgo) => riesgo switch
    {
        "Alerta crítica" => "table-danger",
        "Riesgo moderado" => "table-warning",
        "Debajo del stock mínimo" => "table-secondary",
        "Sin uso" => "table-info",
        "Sin riesgo" => "table-success",
        _ => ""
    };
}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    window.renderRiesgoChart = function (riesgos) {
        const ctx = document.getElementById('riskChart');
        if (!ctx) return;

        const labels = Object.keys(riesgos);
        const data = Object.values(riesgos);
        const colors = ['#dc3545', '#ffc107', '#0dcaf0', '#198754', '#6f42c1'];

        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Insumos',
                    data: data,
                    backgroundColor: colors.slice(0, labels.length),
                    borderColor: '#fff',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' },
                    title: { display: true, text: 'Cantidad de insumos por tipo de riesgo' }
                }
            }
        });
    };
</script>
