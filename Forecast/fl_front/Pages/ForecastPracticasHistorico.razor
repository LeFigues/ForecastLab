@page "/forecast-historico-practicas"
@using System.Text.Json
@inject HttpClient Http

<div class="container py-4" style="background-color: #1a0010; color: #ffffff; min-height: 100vh;">
    <h3 class="text-center fw-bold mb-4" style="color: #ff0077;">
        <i class="bi bi-journal-text me-2"></i> Historial de Forecast de Uso de Prácticas
    </h3>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center mt-5">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="alert alert-danger text-center mt-4">
            No se pudo cargar el historial. Verifique la API o intente nuevamente.
        </div>
    }
    else
    {
        <div class="row mb-3 justify-content-between px-3">
            <div class="col-md-6 mb-2">
                <input type="text" class="form-control shadow-sm rounded-pill px-4"
                       placeholder="Buscar práctica..."
                       @bind="searchTerm"
                       @bind:event="oninput" />
            </div>
            <div class="col-md-4 mb-2">
                <select class="form-select shadow-sm rounded-pill"
                        @bind="selectedMonth">
                    <option value="">Todos los meses</option>
                    @foreach (var mes in meses)
                    {
                        <option value="@mes">@mes</option>
                    }
                </select>
            </div>
            <div class="col-md-2 mb-2 text-end">
                <button class="btn btn-outline-light rounded-pill" @onclick="ApplyFilters">
                    Aplicar filtros
                </button>
            </div>
        </div>

        @if (filteredData.Count == 0)
        {
            <div class="alert alert-warning text-center">
                No hay registros que coincidan con los filtros.
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-striped table-hover text-white align-middle">
                    <thead class="table-light text-dark">
                        <tr>
                            <th>Práctica</th>
                            <th>Mes</th>
                            <th>Solicitudes</th>
                            <th>Estudiantes</th>
                            <th>Fecha Forecast</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredData)
                        {
                            <tr>
                                <td>@item.PracticaTitulo</td>
                                <td>@item.Mes</td>
                                <td>@item.TotalSolicitudes</td>
                                <td>@item.TotalEstudiantes</td>
                                <td>@item.FechaForecast.ToString("yyyy-MM-dd HH:mm")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
</div>

@code {
    private List<ForecastPractica> allData = new();
    private List<ForecastPractica> filteredData = new();
    private List<string> meses = new();
    private string searchTerm = string.Empty;
    private string selectedMonth = string.Empty;
    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://forecast.labs.underflabs.com/api/forecast/practicas-uso/historico");
            if (!response.IsSuccessStatusCode)
            {
                hasError = true;
                return;
            }

            var content = await response.Content.ReadAsStringAsync();
            if (content.TrimStart().StartsWith("<"))
            {
                hasError = true;
                return;
            }

            var data = JsonSerializer.Deserialize<List<ForecastPractica>>(content, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            if (data == null)
            {
                hasError = true;
                return;
            }

            foreach (var p in data)
            {
                p.PracticaTitulo = p.PracticaTitulo?.Trim() ?? "";
                p.Mes = p.Mes?.Trim() ?? "";
            }

            allData = data.OrderByDescending(x => x.Mes).ToList();
            meses = allData.Select(x => x.Mes).Distinct().OrderByDescending(x => x).ToList();
            ApplyFilters();
        }
        catch
        {
            hasError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredData = allData;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredData = filteredData
                .Where(x => x.PracticaTitulo.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (!string.IsNullOrWhiteSpace(selectedMonth))
        {
            filteredData = filteredData
                .Where(x => x.Mes == selectedMonth)
                .ToList();
        }
    }

    private class ForecastPractica
    {
        public ForecastId Id { get; set; } = new();
        public string PracticaTitulo { get; set; } = "";
        public string Mes { get; set; } = "";
        public int TotalSolicitudes { get; set; }
        public int TotalEstudiantes { get; set; }
        public DateTime FechaForecast { get; set; }
    }

    private class ForecastId
    {
        public long Timestamp { get; set; }
        public DateTime CreationTime { get; set; }
    }
}
