@page "/normalized-supplies"
@using System.Text.Json.Serialization
@inject HttpClient Http

<div class="container py-4" style="background-color: #1a0010; color: #ffffff; min-height: 100vh;">
    <div class="mb-4">
        <h2 class="text-white fw-bold">
            <i class="bi bi-layers-half me-2"></i> Insumos Normalizados
        </h2>
        <div class="d-flex flex-wrap gap-2">
            <button class="btn btn-outline-light" @onclick="GetAllAsync">
                <i class="bi bi-download me-1"></i> Cargar
            </button>
            <button class="btn" style="background-color: #ff0077; color: white;" @onclick="AnalyzeAllWithAI">
                <i class="bi bi-cpu me-1"></i> Analizar Todos con IA
            </button>
            <button class="btn btn-success" @onclick="UpdateSelectedWithAI">
                <i class="bi bi-arrow-repeat me-1"></i> Actualizar Seleccionados
            </button>
        </div>
    </div>

    @if (supplies == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <div class="row g-4">
            @foreach (var s in supplies)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card h-100 shadow-sm border-0" style="background-color: #2c002c; color: #ffffff;">
                        <div class="card-body">
                            <div class="form-check mb-2">
                                <input class="form-check-input" type="checkbox" value="@s.Id"
                                       checked="@selectedIds.Contains(s.Id)"
                                       @onchange="e => ToggleSelection(e, s.Id)" />
                                <label class="form-check-label fw-bold">
                                    @s.Nombre
                                </label>
                            </div>
                            <p class="mb-1"><strong>Unidad:</strong> @s.UnidadMedida</p>
                            <p class="mb-1"><strong>Precio:</strong> @s.PrecioEstimado Bs</p>
                            <p class="mb-1"><strong>Vida útil:</strong> @s.VidaUtilMeses meses</p>
                            <p class="mb-1"><strong>Año compra:</strong> @s.AñoCompra</p>
                            @if (s.PrecioGeneradoPorIA || s.VidaUtilGeneradaPorIA)
                            {
                                <span class="badge bg-warning text-dark">Generado por IA</span>
                            }
                        </div>
                        <div class="card-footer bg-transparent border-0 text-end">
                            <button class="btn btn-sm btn-outline-light" @onclick="() => AnalyzeOne(s.IdInsumo)">
                                <i class="bi bi-pencil-square me-1"></i> Analizar
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<NormalizedSupply> supplies;
    private HashSet<string> selectedIds = new();

    private async Task GetAllAsync()
    {
        supplies = await Http.GetFromJsonAsync<List<NormalizedSupply>>("https://forecast.labs.underflabs.com/api/normalizedsupplies");
    }

    private async Task AnalyzeOne(int idInsumo)
    {
        await Http.PostAsync($"https://forecast.labs.underflabs.com/api/normalizedsupplies/actualizar/{idInsumo}", null);
        await GetAllAsync();
    }

    private async Task AnalyzeAllWithAI()
    {
        await Http.PostAsync("https://forecast.labs.underflabs.com/api/normalizedsupplies/actualizar-todos", null);
        await GetAllAsync();
    }

    private async Task UpdateSelectedWithAI()
    {
        foreach (var id in selectedIds)
        {
            var item = supplies.FirstOrDefault(x => x.Id == id);
            if (item != null)
            {
                await Http.PostAsync($"https://forecast.labs.underflabs.com/api/normalizedsupplies/actualizar/{item.IdInsumo}", null);
            }
        }
        await GetAllAsync();
    }

    void ToggleSelection(ChangeEventArgs e, string id)
    {
        if ((bool)e.Value)
            selectedIds.Add(id);
        else
            selectedIds.Remove(id);
    }

    public class NormalizedSupply
    {
        [JsonPropertyName("id")] public string Id { get; set; }
        [JsonPropertyName("idInsumo")] public int IdInsumo { get; set; }
        [JsonPropertyName("nombre")] public string Nombre { get; set; }
        [JsonPropertyName("nombreNormalizado")] public string NombreNormalizado { get; set; }
        [JsonPropertyName("descripcion")] public string Descripcion { get; set; }
        [JsonPropertyName("tipo")] public string Tipo { get; set; }
        [JsonPropertyName("unidadMedida")] public string UnidadMedida { get; set; }
        [JsonPropertyName("stockTotal")] public int StockTotal { get; set; }
        [JsonPropertyName("stockMinimo")] public int StockMinimo { get; set; }
        [JsonPropertyName("stockMaximo")] public int StockMaximo { get; set; }
        [JsonPropertyName("precioEstimado")] public decimal PrecioEstimado { get; set; }
        [JsonPropertyName("vidaUtilMeses")] public int VidaUtilMeses { get; set; }
        [JsonPropertyName("añoCompra")] public int AñoCompra { get; set; }
        [JsonPropertyName("categoria")] public string Categoria { get; set; }
        [JsonPropertyName("frecuenciaUso")] public string FrecuenciaUso { get; set; }
        [JsonPropertyName("cantidadUsadaPromedio")] public string CantidadUsadaPromedio { get; set; }
        [JsonPropertyName("precioGeneradoPorIA")] public bool PrecioGeneradoPorIA { get; set; }
        [JsonPropertyName("vidaUtilGeneradaPorIA")] public bool VidaUtilGeneradaPorIA { get; set; }
    }
}
